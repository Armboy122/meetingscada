import { createContext, useContext, useState, useEffect, useCallback } from 'react';
import type { ReactNode } from 'react';

interface Admin {
  id: number;
  username: string;
  fullName: string;
  email: string | null;
  isActive: boolean;
  createdAt: string | null;
}

interface AuthContextType {
  isAuthenticated: boolean;
  admin: Admin | null;
  loading: boolean;
  login: (username: string, password: string) => Promise<void>;
  logout: () => void;
  token: string | null;
}

interface LoginResponse {
  success: boolean;
  message: string;
  data: {
    token: string;
    admin: Admin;
  };
}

const AuthContext = createContext<AuthContextType | null>(null);

interface AuthProviderProps {
  children: ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [admin, setAdmin] = useState<Admin | null>(null);
  const [loading, setLoading] = useState(true);
  const [token, setToken] = useState<string | null>(null);

  const logout = useCallback(() => {
    localStorage.removeItem('authToken');
    localStorage.removeItem('adminData');
    setToken(null);
    setAdmin(null);
    setIsAuthenticated(false);
  }, []);

  const verifyToken = useCallback(async (authToken: string) => {
    const maxRetries = 2;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîç Token verification attempt ${attempt}/${maxRetries}`);
        
        // ‡πÉ‡∏ä‡πâ proxy ‡πÉ‡∏ô development ‡∏´‡∏£‡∏∑‡∏≠ production URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const apiUrl = import.meta.env.DEV ? '/api/auth/me' : 'https://cfw-bun-hono-drizzle.apiarm.workers.dev/auth/me';
        const response = await fetch(apiUrl, {
          headers: {
            'Authorization': `Bearer ${authToken}`
          },
          signal: AbortSignal.timeout(10000) // 10 second timeout
        });

        if (response.ok) {
          console.log('‚úÖ Token verification successful');
          return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å function
        } else if (response.status === 401) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 401 Unauthorized ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏£‡∏¥‡∏á‡πÜ
          console.log('üîí Token expired or invalid (401)');
          logout();
          return;
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡πÄ‡∏ä‡πà‡∏ô 503) ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ùå Token verification attempt ${attempt} failed:`, error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if (attempt === maxRetries) {
          break;
        }
        
        // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô retry
        const waitTime = 1000 * attempt; // 1s, 2s
        console.log(`‚è≥ Waiting ${waitTime}ms before token retry...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà logout ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    console.warn('üö® Token verification failed after all retries, but keeping session:', lastError);
    console.log('üí° Backend seems unstable, keeping user logged in for better UX');
    
    // ‡πÑ‡∏°‡πà logout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ user ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÅ‡∏°‡πâ backend ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£
    // ‡∏à‡∏∞ logout ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ 401 Unauthorized ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  }, [logout]);

  // Check for existing auth on mount
  useEffect(() => {
    const initializeAuth = async () => {
      const storedToken = localStorage.getItem('authToken');
      const storedAdmin = localStorage.getItem('adminData');

      if (storedToken && storedAdmin) {
        try {
          const adminData = JSON.parse(storedAdmin);
          
          // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ state ‡∏Å‡πà‡∏≠‡∏ô
          setToken(storedToken);
          setAdmin(adminData);
          setIsAuthenticated(true);
          
          console.log('üîê Found stored credentials, initializing session...');
          
          // Verify token with backend ‡πÅ‡∏ö‡∏ö silent (‡πÑ‡∏°‡πà logout ‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß)
          await verifyToken(storedToken);
          
        } catch (error) {
          console.error('Error parsing stored admin data:', error);
          logout();
        }
      }
      setLoading(false);
    };

    initializeAuth();
  }, [verifyToken, logout]);

  const login = async (username: string, password: string): Promise<void> => {
    const maxRetries = 3;
    let lastError: Error | null = null;

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        console.log(`üîÑ Login attempt ${attempt}/${maxRetries}`);
        
        const apiUrl = import.meta.env.DEV ? '/api/auth/login' : 'https://cfw-bun-hono-drizzle.apiarm.workers.dev/auth/login';
        const response = await fetch(apiUrl, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ username, password }),
          signal: AbortSignal.timeout(15000) // 15 second timeout
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON response ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
        }

        const data: LoginResponse = await response.json();

        if (data.success) {
          const { token: authToken, admin: adminData } = data.data;
          
          // Store in localStorage
          localStorage.setItem('authToken', authToken);
          localStorage.setItem('adminData', JSON.stringify(adminData));
          
          // Update state
          setToken(authToken);
          setAdmin(adminData);
          setIsAuthenticated(true);
          
          console.log('‚úÖ Login successful');
          return; // ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å loop
        } else {
          throw new Error(data.message);
        }
      } catch (error) {
        lastError = error as Error;
        console.warn(`‚ùå Login attempt ${attempt} failed:`, error);
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô credential error ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á retry
        if (error instanceof Error && error.message.includes('‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô')) {
          throw error;
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        if (attempt === maxRetries) {
          break;
        }
        
        // ‡∏£‡∏≠‡∏Å‡πà‡∏≠‡∏ô retry (exponential backoff)
        const waitTime = Math.pow(2, attempt - 1) * 1000; // 1s, 2s, 4s
        console.log(`‚è≥ Waiting ${waitTime}ms before retry...`);
        await new Promise(resolve => setTimeout(resolve, waitTime));
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏•‡∏≠‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    console.error('üö® All login attempts failed:', lastError);
    
    if (lastError instanceof TypeError && lastError.message.includes('Failed to fetch')) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï');
    } else if (lastError instanceof SyntaxError && lastError.message.includes('JSON')) {
      throw new Error('‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
    } else if (lastError instanceof Error && lastError.name === 'AbortError') {
      throw new Error('‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
    }
    
    throw lastError || new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
  };



  return (
    <AuthContext.Provider value={{
      isAuthenticated,
      admin,
      loading,
      login,
      logout,
      token
    }}>
      {children}
    </AuthContext.Provider>
  );
}

// eslint-disable-next-line react-refresh/only-export-components
export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
} 